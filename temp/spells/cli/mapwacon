#!/usr/bin/env python3
import os
import sys

# --- Venv Self-Execution ---
VENV_PYTHON = os.path.expanduser("~/.magustui/.venv/bin/python")
if sys.executable != VENV_PYTHON:
    if os.path.exists(VENV_PYTHON):
        os.execv(VENV_PYTHON, [VENV_PYTHON] + sys.argv)
    else:
        print(f"Error: MagusTUI virtual environment not found at {VENV_PYTHON}", file=sys.stderr)
        sys.exit(1)
# --- End Venv Self-Execution ---

import argparse
import re
import subprocess
from rich.console import Console
from rich.table import Table
from rich.theme import Theme

def run_command(command, console):
    """Runs a command and returns its output."""
    try:
        result = subprocess.run(
            command,
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError) as e:
        console.print(f"Error running command: {' '.join(command)}", style="error")
        if hasattr(e, 'stderr'):
            console.print(e.stderr, style="error")
        sys.exit(1)

def get_wacom_devices(console):
    """Gets a list of Wacom devices."""
    output = run_command(["xsetwacom", "--list", "devices"], console)
    return [line.split("\t")[0] for line in output.splitlines()]

def get_screens(console):
    """Gets a list of connected screens."""
    output = run_command(["xrandr", "-q", "--current"], console)
    return re.findall(r"^(\S+) connected", output, re.MULTILINE)

def map_device_to_screen(device, screen, console, debug=False):
    """Maps a Wacom device to a screen."""
    if debug:
        console.print(f"Mapping '[path]{device}[/path]' to '[path]{screen}[/path]'", style="info")

    run_command(["xsetwacom", "--set", device, "ResetArea"], console)
    area_info = run_command(["xsetwacom", "--get", device, "Area"], console)
    areax, areay = map(int, area_info.split()[2:])

    if screen == "desktop":
        screen_info = run_command(["xrandr", "-q", "--current"], console)
        width, height = map(int, re.search(r"current (\d+) x (\d+)", screen_info).groups())
        map_to_output = "desktop"
    else:
        screen_info = run_command(["xrandr", "-q", "--current"], console)
        match = re.search(rf"^{screen} connected .*? (\d+)x(\d+)\+(\d+)\+(\d+)", screen_info, re.MULTILINE)
        if not match:
            console.print(f"Error: Could not find screen '{screen}'.", style="error")
            return
        width, height, _, _ = map(int, match.groups())
        map_to_output = match.group(0).split()[2]


    ratio_areay = int(areax * height / width)
    ratio_areax = int(areay * width / height)

    new_areax = areax if areay > ratio_areay else ratio_areax
    new_areay = ratio_areay if areay > ratio_areay else areay

    run_command(["xsetwacom", "--set", device, "Area", "0", "0", str(new_areax), str(new_areay)], console)
    run_command(["xsetwacom", "--set", device, "MapToOutput", map_to_output], console)


def main():
    """
    A spell of binding, to align the ethereal plane of a Wacom tablet with the physical realm of a screen.
    This incantation will allow the Magus to map a Wacom device to a specific screen,
    ensuring a harmonious connection between the two.
    """
    custom_theme = Theme({
        "info": "bold cyan",
        "path": "blue",
        "success": "bold green",
        "error": "bold red",
        "header": "bold blue on white"
    })
    console = Console(theme=custom_theme)

    parser = argparse.ArgumentParser(description="Map Wacom tablet areas to specific screens.")
    parser.add_argument("--list-devices", action="store_true", help="List all present Wacom device names.")
    parser.add_argument("--list-screens", action="store_true", help="List all screens that devices may be mapped to.")
    parser.add_argument("-d", "--device", action="append", help="Specifies a device name which should be mapped to a screen.")
    parser.add_argument("--device-regex", help="Specifies a grep-style regex pattern for devices.")
    parser.add_argument("-s", "--screen", help="Maps all previously specified devices to the given screen name.")
    parser.add_argument("--debug", action="store_true", help="Prints debug information.")
    args = parser.parse_args()

    if args.list_devices:
        devices = get_wacom_devices(console)
        table = Table(title="Wacom Devices", box=None, show_header=False)
        for device in devices:
            table.add_row(device)
        console.print(table)
        return

    if args.list_screens:
        screens = get_screens(console)
        table = Table(title="Screens", box=None, show_header=False)
        for screen in screens:
            table.add_row(screen)
        table.add_row("desktop")
        console.print(table)
        return

    if not args.screen:
        console.print("Error: You must specify a screen with -s or --screen.", style="error")
        parser.print_help()
        return

    devices_to_map = []
    if args.device:
        devices_to_map.extend(args.device)

    if args.device_regex:
        all_devices = get_wacom_devices(console)
        for device in all_devices:
            if re.search(args.device_regex, device):
                devices_to_map.append(device)

    if not devices_to_map:
        console.print("Error: You must specify at least one device with -d or --device-regex.", style="error")
        parser.print_help()
        return

    all_screens = get_screens(console) + ["desktop"]
    if args.screen not in all_screens:
        console.print(f"Error: Screen '{args.screen}' not found.", style="error")
        return

    for device in devices_to_map:
        map_device_to_screen(device, args.screen, console, args.debug)

    console.print("Wacom mapping complete.", style="success")

if __name__ == "__main__":
    main()