#!/usr/bin/env python3
import os
import sys

# --- Venv Self-Execution ---
VENV_PYTHON = os.path.expanduser("~/.magustui/.venv/bin/python")
if sys.executable != VENV_PYTHON:
    if os.path.exists(VENV_PYTHON):
        os.execv(VENV_PYTHON, [VENV_PYTHON] + sys.argv)
    else:
        print(f"Error: MagusTUI virtual environment not found at {VENV_PYTHON}", file=sys.stderr)
        sys.exit(1)
# --- End Venv Self-Execution ---

import argparse
import shutil
import subprocess
import tempfile
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm
from rich.theme import Theme

def check_required_commands(console):
    """Checks for required commands."""
    required_commands = ["rsync", "parted", "wipefs", "mkfs.vfat", "mkfs.ntfs", "udisksctl", "sha256sum", "mount", "umount", "mkdir", "cp", "sync"]
    for cmd in required_commands:
        if not shutil.which(cmd):
            console.print(f"Error: Missing command '{cmd}'. Please install it and rerun the script.", style="error")
            sys.exit(1)
    console.print("All required commands are available.", style="success")

def run_command(command, console, description):
    """Runs a command and displays its progress."""
    console.print(Panel(description, style="info"))
    try:
        process = subprocess.run(command, check=True, capture_output=True, text=True)
        return process.stdout.strip()
    except subprocess.CalledProcessError as e:
        console.print(f"Error running command: {' '.join(command)}", style="error")
        console.print(e.stderr, style="error")
        sys.exit(1)

def main():
    """
    A complex ritual to imbue a USB drive with the soul of a Windows ISO.
    This spell will meticulously partition, format, and transfer the necessary essences
    to create a bootable artifact for installing the Windows operating system.
    """
    custom_theme = Theme({
        "info": "bold cyan",
        "success": "bold green",
        "warning": "bold yellow",
        "error": "bold red",
        "path": "blue"
    })
    console = Console(theme=custom_theme)

    parser = argparse.ArgumentParser(description="Create a bootable Windows USB drive from an ISO file.")
    parser.add_argument("iso_path", help="Path to the Windows ISO file.")
    parser.add_argument("usb_device", help="The USB block device (e.g., /dev/sdX).")
    args = parser.parse_args()

    check_required_commands(console);

    if Confirm.ask("Do you want to calculate the ISO file checksum? This could take some time.", default=False):
        iso_checksum = run_command(["sha256sum", args.iso_path], console, "Calculating ISO checksum...")
        console.print(f"Checksum is: [info]{iso_checksum}[/info]")
        if not Confirm.ask("Please verify the checksum and press 'y' to continue.", default=True):
            console.print("Aborting due to user response.", style="warning")
            sys.exit(1)

    if not Confirm.ask(f"[warning]WARNING: All data on {args.usb_device} will be lost! Are you sure you want to continue?[/warning]", default=False):
        console.print("Aborted by user.", style="warning")
        sys.exit(1)

    with tempfile.TemporaryDirectory() as iso_mount, \
         tempfile.TemporaryDirectory() as vfat_mount, \
         tempfile.TemporaryDirectory() as ntfs_mount:

        run_command(["wipefs", "-a", args.usb_device], console, f"Wiping {args.usb_device}...")
        run_command(["parted", args.usb_device, "mklabel", "gpt"], console, "Creating GPT partition table...")
        run_command(["parted", args.usb_device, "mkpart", "BOOT", "fat32", "0%", "1GiB"], console, "Creating BOOT partition...")
        run_command(["parted", args.usb_device, "mkpart", "INSTALL", "ntfs", "1GiB", "100%"], console, "Creating INSTALL partition...")

        run_command(["mount", args.iso_path, iso_mount], console, f"Mounting {args.iso_path}...")
        
        run_command(["mkfs.vfat", "-n", "BOOT", f"{args.usb_device}1"], console, "Formatting BOOT partition...")
        run_command(["mount", f"{args.usb_device}1", vfat_mount], console, "Mounting BOOT partition...")
        
        run_command(["rsync", "-r", "--progress", "--exclude", "sources", "--delete-before", f"{iso_mount}/", f"{vfat_mount}/"], console, "Copying files to BOOT partition...")
        
        os.makedirs(os.path.join(vfat_mount, "sources"), exist_ok=True)
        run_command(["cp", os.path.join(iso_mount, "sources/boot.wim"), os.path.join(vfat_mount, "sources/")], console, "Copying boot.wim...")

        run_command(["mkfs.ntfs", "--quick", "-L", "INSTALL", f"{args.usb_device}2"], console, "Formatting INSTALL partition...")
        run_command(["mount", f"{args.usb_device}2", ntfs_mount], console, "Mounting INSTALL partition...")
        
        run_command(["rsync", "-r", "--progress", "--delete-before", f"{iso_mount}/", f"{ntfs_mount}/"], console, "Copying files to INSTALL partition...")

        run_command(["umount", ntfs_mount], console, "Unmounting INSTALL partition...")
        run_command(["umount", vfat_mount], console, "Unmounting BOOT partition...")
        run_command(["umount", iso_mount], console, "Unmounting ISO...")
        run_command(["sync"], console, "Syncing data to USB drive...")

        run_command(["udisksctl", "power-off", "-b", args.usb_device], console, "Powering off USB drive...")

    console.print(Panel("Done! You can now safely disconnect your USB drive.", style="success"))

if __name__ == "__main__":
    main()