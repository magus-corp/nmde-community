#!/usr/bin/env python3
import os
import sys

# --- Venv Self-Execution ---
VENV_PYTHON = os.path.expanduser("~/.magustui/.venv/bin/python")
if sys.executable != VENV_PYTHON:
    if os.path.exists(VENV_PYTHON):
        os.execv(VENV_PYTHON, [VENV_PYTHON] + sys.argv)
    else:
        print(f"Error: MagusTUI virtual environment not found at {VENV_PYTHON}", file=sys.stderr)
        sys.exit(1)
# --- End Venv Self-Execution ---

import requests
import argparse
from rich.console import Console
from rich.progress import Progress
from rich.theme import Theme

def transcribe_all(directory):
    """
    A spell of transcription, to convert the spoken word into the written scroll.
    This incantation will seek out all .ogg files in a directory and, using a remote
    API, transcribe their contents into text files.
    """
    custom_theme = Theme({
        "info": "bold cyan",
        "warning": "bold yellow",
        "error": "bold red",
        "success": "bold green",
        "path": "blue"
    })
    console = Console(theme=custom_theme)

    ogg_files = [f for f in os.listdir(directory) if f.lower().endswith(".ogg")]

    if not ogg_files:
        console.print("No .ogg files found in the directory.", style="warning")
        return

    with Progress() as progress:
        task = progress.add_task("[info]Transcribing files...", total=len(ogg_files))

        for filename in ogg_files:
            file_path = os.path.join(directory, filename)
            output_filename = f"output_{os.path.splitext(filename)[0]}.txt"

            with open(file_path, "rb") as f:
                files = {"audio_file": (filename, f, "application/ogg")}
                try:
                    response = requests.post(
                        "https://whisper-api.maguscorp.com.br/asr?encode=true&task=transcribe&language=pt&vad_filter=true&word_timestamps=false&output=txt",
                        files=files,
                        headers={"accept": "application/json"}
                    )
                    response.raise_for_status()

                    with open(output_filename, "w") as out_f:
                        out_f.write(response.text)

                    progress.update(task, advance=1, description=f"[info]Transcribed [path]{filename}[/path]")
                except requests.exceptions.RequestException as e:
                    progress.console.print(f"Error transcribing {filename}: {e}", style="error")

    console.print("All transcriptions complete.", style="success")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Transcribes all .ogg files in a directory.")
    parser.add_argument("directory", nargs="?", default=".", help="The directory containing the .ogg files (defaults to current directory).")
    args = parser.parse_args()
    transcribe_all(args.directory)
