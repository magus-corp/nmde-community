#!/usr/bin/env python3
import os
import sys

# --- Venv Self-Execution ---
VENV_PYTHON = os.path.expanduser("~/.magustui/.venv/bin/python")
if sys.executable != VENV_PYTHON:
    if os.path.exists(VENV_PYTHON):
        os.execv(VENV_PYTHON, [VENV_PYTHON] + sys.argv)
    else:
        print(f"Error: MagusTUI virtual environment not found at {VENV_PYTHON}", file=sys.stderr)
        sys.exit(1)
# --- End Venv Self-Execution ---

import argparse
import json
import subprocess
from rich.console import Console
from rich.table import Table
from rich.theme import Theme

def kubectl(command, console):
    """Executes a kubectl command and returns the JSON output."""
    try:
        result = subprocess.run(
            ["kubectl"] + command,
            capture_output=True,
            text=True,
            check=True
        )
        return json.loads(result.stdout) if result.stdout else None
    except subprocess.CalledProcessError as e:
        console.print(f"Error running kubectl command: {' '.join(command)}", style="error")
        console.print(e.stderr, style="error")
        exit(1)
    except json.JSONDecodeError:
        console.print("Error: Could not decode JSON from kubectl output.", style="error")
        return None


def main(namespace):
    """
    A divination spell to reveal the resource essences of all daemonsets in a Kubernetes namespace.
    This incantation will peer into the ethereal plane of Kubernetes and report on the
    CPU and memory requirements of each daemonset.
    """
    custom_theme = Theme({
        "info": "bold cyan",
        "path": "blue",
        "success": "bold green",
        "error": "bold red",
        "header": "bold blue on white"
    })
    console = Console(theme=custom_theme)

    console.print(f"Fetching resource requirements for daemonsets in namespace: [path]{namespace}[/path]", style="info")

    daemonsets = kubectl(["get", "daemonsets", "-n", namespace, "-o", "json"], console)

    if not daemonsets or not daemonsets.get("items"):
        console.print(f"No daemonsets found in namespace '{namespace}'.", style="info")
        return

    for ds in daemonsets["items"]:
        ds_name = ds["metadata"]["name"]
        
        table = Table(title=f"DaemonSet: [info]{ds_name}[/info]", box=None, show_header=True, header_style="header")
        table.add_column("Container")
        table.add_column("Type")
        table.add_column("Requests")
        table.add_column("Limits")

        containers = ds["spec"]["template"]["spec"].get("containers", [])
        for container in containers:
            container_name = container["name"]
            resources = container.get("resources", {})
            requests = resources.get("requests", {})
            limits = resources.get("limits", {})
            
            table.add_row(
                f"[path]{container_name}[/path]",
                "CPU",
                requests.get("cpu", "-"),
                limits.get("cpu", "-")
            )
            table.add_row(
                "",
                "Memory",
                requests.get("memory", "-"),
                limits.get("memory", "-")
            )
        
        console.print(table)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Get resource requirements for all daemonsets in a namespace.")
    parser.add_argument("namespace", help="The Kubernetes namespace to inspect.")
    args = parser.parse_args()
    main(args.namespace)