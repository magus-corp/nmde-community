#!/usr/bin/env python3
import os
import sys

# --- Venv Self-Execution ---
VENV_PYTHON = os.path.expanduser("~/.magustui/.venv/bin/python")
if sys.executable != VENV_PYTHON:
    if os.path.exists(VENV_PYTHON):
        os.execv(VENV_PYTHON, [VENV_PYTHON] + sys.argv)
    else:
        print(f"Error: MagusTUI virtual environment not found at {VENV_PYTHON}", file=sys.stderr)
        sys.exit(1)
# --- End Venv Self-Execution ---

import subprocess
import argparse
from rich.console import Console
from rich.theme import Theme

def extract_audio(root_dir):
    """
    A spell of separation, to draw the sound from the vision.
    This incantation will traverse the specified directory, seeking out video files
    and extracting their auditory essence into MP3 artifacts.
    """
    custom_theme = Theme({
        "info": "bold cyan",
        "warning": "bold yellow",
        "error": "bold red",
        "success": "bold green",
        "path": "blue"
    })
    console = Console(theme=custom_theme)

    video_extensions = ['.mp4', '.mkv', '.mov', '.avi']

    if not os.path.isdir(root_dir):
        console.print(f"Error: '{root_dir}' is not a directory.", style="error")
        return

    for dirpath, _, filenames in os.walk(root_dir):
        for filename in filenames:
            if any(filename.lower().endswith(ext) for ext in video_extensions):
                video_path = os.path.join(dirpath, filename)
                base, _ = os.path.splitext(filename)
                mp3_path = os.path.join(dirpath, f"{base}.mp3")

                if os.path.exists(mp3_path):
                    console.print(f"Skipping existing: [path]{mp3_path}[/path]", style="warning")
                    continue

                console.print(f"Extracting MP3 from '[path]{video_path}[/path]' to '[path]{mp3_path}[/path]'", style="info")
                subprocess.run([
                    "ffmpeg", "-nostdin", "-y", "-v", "warning", "-stats",
                    "-i", video_path,
                    "-vn",
                    "-codec:a", "libmp3lame", "-qscale:a", "2",
                    mp3_path
                ])

    console.print("All MP3 extractions complete.", style="success")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Recursively finds video files and extracts their audio into MP3 files.")
    parser.add_argument("root_dir", help="The root directory containing the video files.")
    args = parser.parse_args()
    extract_audio(args.root_dir)
