# This file is managed by nmde.
# Manual changes will be overwritten.

# ------------------------------------------------------------------------------
# Environment Variables
# ------------------------------------------------------------------------------
export EDITOR="nvim"
export SUDO_EDITOR="$EDITOR"
export BAT_THEME=ansi
export PATH="./bin:$HOME/.local/bin:$HOME/.local/share/nmde/bin:$PATH"
export nmde_PATH="/home/$USER/.local/share/nmde"

# ------------------------------------------------------------------------------
# Zsh Options (setopt)
# ------------------------------------------------------------------------------
# History settings
setopt APPEND_HISTORY       # Append to history file instead of overwriting
setopt EXTENDED_HISTORY     # Save timestamp and duration
setopt HIST_IGNORE_ALL_DUPS # If a new command is a duplicate, remove the older one
setopt HIST_IGNORE_SPACE    # Don't save commands starting with a space
setopt HIST_VERIFY          # Show command with history expansion before running
setopt INC_APPEND_HISTORY   # Add commands to history immediately
setopt SHARE_HISTORY        # Share history between all sessions

# Other options
setopt AUTO_CD              # cd to a directory just by typing its name
setopt CORRECT              # Enable command correction
setopt NOTIFY               # Report status of background jobs immediately

# ------------------------------------------------------------------------------
# Aliases
# ------------------------------------------------------------------------------
alias ls='eza -lh --group-directories-first --icons=auto'
alias lsa='ls -a'
alias lt='eza --tree --level=2 --long --icons --git'
alias lta='lt -a'
alias ff="fzf --preview 'bat --style=numbers --color=always {}'"
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias g='git'
alias d='docker'
alias r='rails'
alias gcm='git commit -m'
alias gcam='git commit -a -m'
alias gcad='git commit -a --amend'
alias yayf="yay -Slq | fzf --multi --preview 'yay -Sii {1}' --preview-window=down:75% | xargs -ro yay -S"
alias slocal='source .venv/bin/activate'
alias gita='git add -A .'
alias gitc='git commit'
alias gitinitcommit='git add . && git commit -m "initial commit"'
alias justp='gita && git commit -m "$(date)" && git push'
alias sbluetooth='sudo systemctl start bluetooth'
alias rbluetooth='sudo systemctl restart bluetooth'
alias sdocker='sudo systemctl start docker'
alias k='kubectl'
alias kget='kubectl get'
alias kgetall='kubectl get all --all-namespaces'
alias dl_channel='yt-dlp -f "bestvideo[height<=720]+bestaudio/best[height<=720]" -ciw '

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------
# Wrapper for zoxide to provide 'cd' behavior
cd() {
  if [ $# -eq 0 ]; then
    builtin cd ~ && return
  elif [ -d "$1" ]; then
    builtin cd "$1"
  else
    z "$@" && printf " \U000F17A9 " && pwd || echo "Error: Directory not found"
  fi
}

open() {
  xdg-open "$@" >/dev/null 2>&1 &
}

n() {
  if [ "$#" -eq 0 ]; then
    nvim .
  else
    nvim "$@"
  fi
}

# Compression
compress() { tar -czf "${1%/}.tar.gz" "${1%/}"; }
decompress() { tar -xzf "$1"; }

# ------------------------------------------------------------------------------
# Oh My Zsh & Plugin Configuration
# ------------------------------------------------------------------------------
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="powerlevel10k/powerlevel10k"

plugins=(
  git
  zsh-autosuggestions
  zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# ------------------------------------------------------------------------------
# Tool Initialization
# ------------------------------------------------------------------------------
# Source personal secrets
if [[ -f "$HOME/.secrets" ]]; then
  . "$HOME/.secrets"
fi

# mise (dev tools version manager)
if command -v mise &> /dev/null;
  then
  eval "$(mise activate zsh)"
fi

# zoxide (smarter cd)
if command -v zoxide &> /dev/null;
  then
  eval "$(zoxide init zsh)"
fi

# fzf (fuzzy finder)
# Use the Zsh-specific scripts for keybindings and completion
if command -v fzf &> /dev/null;
  then
  if [[ -f /usr/share/fzf/key-bindings.zsh ]]; then
    source /usr/share/fzf/key-bindings.zsh
  fi
  if [[ -f /usr/share/fzf/completion.zsh ]]; then
    source /usr/share/fzf/completion.zsh
  fi
fi

# Lazy-load NVM in a way that preserves arguments on the first run.
export NVM_DIR="$HOME/.config/nvm"

# Define a loader function for each command to avoid argument loss.
# This pattern ensures that $@ is captured before nvm.sh can interfere with it.
nvm() {
  unset -f nvm node npm npx # Remove all wrappers
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # Source NVM
  nvm "$@" # Call the real nvm with the original arguments
}
node() {
  unset -f nvm node npm npx
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  node "$@"
}
npm() {
  unset -f nvm node npm npx
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  npm "$@"
}
npx() {
  unset -f nvm node npm npx
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  npx "$@"
}

# Source NVM's bash completion script if it exists.
# This can be done separately as it's less likely to cause issues.
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"


# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/cmgus/.google-cloud-sdk/path.zsh.inc' ]; then . '/home/cmgus/.google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/cmgus/.google-cloud-sdk/completion.zsh.inc' ]; then . '/home/cmgus/.google-cloud-sdk/completion.zsh.inc'; fi

# Fix later
#
export PATH=$PATH:$HOME/.config/goose/mcp-hermit/bin
